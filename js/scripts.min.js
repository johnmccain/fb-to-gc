/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	__webpack_require__(1);
	// require('../js/AsyncEventLoader.js');
	
	/**
	 * Handles the asynchronous loading of Facebook events through the FB graph API
	 */
	
	var AsyncEventLoader = function () {
		/**
	  * Constructor for the AsyncEventLoader
	  * @constructor
	  * @param {Array} eventIds - An array of Facebook eventId strings to be loaded
	  * @param {function} callback - A callback which should accept an array of objects with event data
	  * @param {string} accessToken - The Facebook access token to be used
	  */
		function AsyncEventLoader(eventIds, callback, accessToken) {
			_classCallCheck(this, AsyncEventLoader);
	
			console.log('constructing AsyncEventLoader');
			/**
	   * An array of eventId strings
	   * @type {Array}
	   */
			this.eventIds = eventIds;
	
			/**
	   * The callback to handle event data responses
	   * @type {function}
	   */
			this.callback = callback;
	
			/**
	   * The Facebook access token to be used in loading these events
	   * @type {string}
	   */
			this.accessToken = accessToken;
	
			/**
	   * An array of event objects to be filled as they are loaded
	   */
			this.events = [];
	
			/**
	   * The number of events to be loaded
	   * @type {number}
	   */
			this.numEvents = this.eventIds.length;
	
			/**
	   * The number of events loaded
	   * @type {number}
	   */
			this.numLoaded = 0;
		}
	
		/**
	  * Initiates the loading process
	  */
	
	
		_createClass(AsyncEventLoader, [{
			key: 'load',
			value: function load() {
				console.log('loading...\n' + this.eventIds.length);
				for (var i = 0; i < this.eventIds.length; ++i) {
					console.log('hello?');
					this.loadEvent(this.eventIds[i], i);
				}
			}
	
			/**
	   * Loads an eventId and adds it to the list of events, calls the callback if all events loaded
	   * @param {string} eventId - The eventId of the Facebook event to load
	   * @param {number} index - the index in the loaded events array
	   */
	
		}, {
			key: 'loadEvent',
			value: function loadEvent(eventId, index) {
				var _self = this;
				console.log('API loading event with id ' + eventId);
				FB.api("/" + eventId + '?' + _self.accessToken, function (response) {
					if (response && !response.error) {
						_self.events[index] = response;
						if (++_self.numLoaded == _self.numEvents) {
							_self.callback(_self.events);
						}
					} else {
						console.error('Error loading Facebook event with id: ' + eventId);
						console.log(response);
					}
				});
			}
		}]);
	
		return AsyncEventLoader;
	}();
	
	var app = angular.module('fbtogc', []);
	
	window.fbAsyncInit = function () {
		FB.init({
			appId: '1354964521180957',
			xfbml: true,
			version: 'v2.8'
		});
		FB.AppEvents.logPageView();
		updateAccessToken();
	};
	
	function updateAccessToken() {
		var $scope = angular.element(document.getElementById('event-table')).scope();
		FB.getLoginStatus(function (response) {
			console.log(response);
			$scope.loginStatus = response;
		});
		window.setTimeout(function () {
			console.log('getting accessToken');
		}, 5000);
		FB.getAuthResponse(function (response) {
			console.log('responding');
			console.log(response);
			$scope.accessToken = response.accessToken;
			console.log($scope.accessToken);
		});
	}
	
	(function (d, s, id) {
		var js,
		    fjs = d.getElementsByTagName(s)[0];
		if (d.getElementById(id)) {
			return;
		}
		js = d.createElement(s);
		js.id = id;
		js.src = "//connect.facebook.net/en_US/sdk.js";
		fjs.parentNode.insertBefore(js, fjs);
	})(document, 'script', 'facebook-jssdk');
	
	app.controller('myCtrl', function ($scope) {
		$scope.eventUrls = [{
			val: ''
		}];
		$scope.removeURL = function (index) {
			$scope.eventUrls.splice(index, 1);
		};
		$scope.addURL = function () {
			console.log($scope.eventUrls);
			$scope.eventUrls.push({
				val: ''
			});
			console.log($scope.eventUrls);
		};
		$scope.processUrls = function () {
			if (!$scope.accessToken) {
				alert('You must be logged in via Facebook in order to gather event data');
			} else {
				console.log('processing urls');
				var eventIds = [];
				for (var i = 0; i < $scope.eventUrls.length; ++i) {
					var startIndex = $scope.eventUrls[i].val.indexOf("/events/");
					if ($scope.eventUrls[i].val && startIndex > 0) {
						if ($scope.eventUrls[i].val.charAt($scope.eventUrls[i].val.length - 1) != '/') {
							eventIds.push($scope.eventUrls[i].val.substring(startIndex + 8, $scope.eventUrls[i].val.length));
						} else {
							eventIds.push($scope.eventUrls[i].val.substring(startIndex + 8, $scope.eventUrls[i].val.length - 1));
						}
					} else {
						//TODO: add form feedback
						console.error('URL ' + (i + 1) + ' is not a facebook event (' + $scope.eventUrls[i].val + ')');
					}
				}
	
				var eventLoader = new AsyncEventLoader(eventIds, function (events) {
					console.log('Events loaded! \n' + events);
				}, $scope.accessToken);
	
				eventLoader.load();
			}
		};
		$scope.resetUrls = function () {
			$scope.eventUrls = [''];
		};
		$scope.hello = function () {
			console.log($scope.eventUrls);
		};
	});

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(2);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(4)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js!./../node_modules/autoprefixer-loader/index.js!./../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js!./../node_modules/autoprefixer-loader/index.js!./../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports
	
	
	// module
	exports.push([module.id, "html {\n  box-sizing: border-box; }\n\nbody {\n  position: relative;\n  padding: 50px 0 100px 0;\n  min-height: 100vh; }\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-weight: bolder; }\n\nfooter {\n  width: 100%;\n  height: 100px;\n  padding: 20px;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: #222222;\n  color: #BDB8B8;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center; }\n\n.nav-button {\n  display: inline-block;\n  width: 120px;\n  color: #BDB8B8;\n  font-size: 1.4em;\n  font-weight: lighter;\n  line-height: 50px;\n  text-align: center;\n  text-transform: uppercase;\n  -webkit-transition: all 0.1s;\n  transition: all 0.1s; }\n\n.nav-button:hover {\n  background-color: #337AB7;\n  color: #DEDEDE;\n  text-decoration: none; }\n\n.url-btn {\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  padding: 6px;\n  margin: 6px;\n  display: inline-block; }\n\n.url-input {\n  width: calc(100% - 64px);\n  display: inline-block; }\n", ""]);
	
	// exports


/***/ },
/* 3 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,