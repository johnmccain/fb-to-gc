/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(1);
	// require('../js/AsyncEventLoader.js');
	
	var app = angular.module('fbtogc', []);
	
	window.fbAsyncInit = function () {
		FB.init({
			appId: '1354964521180957',
			xfbml: true,
			version: 'v2.8'
		});
		FB.AppEvents.logPageView();
		var $scope = angular.element('[ng-controller=myCtrl]').scope();
		$scope.getFBAuth();
	};
	
	(function (d, s, id) {
		var js,
		    fjs = d.getElementsByTagName(s)[0];
		if (d.getElementById(id)) {
			return;
		}
		js = d.createElement(s);
		js.id = id;
		js.src = "//connect.facebook.net/en_US/sdk.js";
		fjs.parentNode.insertBefore(js, fjs);
	})(document, 'script', 'facebook-jssdk');
	
	/**
	 * Handles Facebook api authentication
	 */
	app.service('fbAuth', function () {
		var _self = this;
		this.auth = function () {
			var def = new jQuery.Deferred();
			FB.getLoginStatus(function (response) {
				console.log(response);
				def.resolve(response);
			});
			var prom = def.promise();
			prom.connected = false;
			return prom;
		};
	});
	
	/**
	 * Handles the asynchronous loading of Facebook events through the FB graph API
	 */
	app.service('eventLoader', function () {
		var _self = this;
		this.loadEvent = function (eventId, accessToken) {
			var def = new jQuery.Deferred();
			FB.api('/' + eventId + '?access_token=' + accessToken, function (response) {
				def.resolve(response);
				//Do something with the result
			});
			var prom = def.promise();
			prom.connected = false;
			return prom;
		};
	});
	
	app.controller('myCtrl', ['$scope', 'fbAuth', 'eventLoader', function ($scope, fbAuth, eventLoader) {
		$scope.getFBAuth = function () {
			//TODO: automatically renew access token
			var prom = fbAuth.auth();
			prom.then(function (response) {
				$scope.loginStatus = response.status;
				$scope.accessToken = response.authResponse.accessToken;
			});
		};
		$scope.events = [];
		$scope.eventUrls = [{
			val: ''
		}];
		$scope.removeURL = function (index) {
			$scope.eventUrls.splice(index, 1);
		};
		$scope.addURL = function () {
			console.log($scope.eventUrls);
			$scope.eventUrls.push({
				val: ''
			});
			console.log($scope.eventUrls);
		};
		$scope.processUrls = function () {
			if (!$scope.accessToken) {
				alert('You must be logged in via Facebook in order to gather event data');
			} else {
				var eventIds = [];
				for (var i = 0; i < $scope.eventUrls.length; ++i) {
					var startIndex = $scope.eventUrls[i].val.indexOf("/events/");
					if ($scope.eventUrls[i].val && startIndex > 0) {
						if ($scope.eventUrls[i].val.charAt($scope.eventUrls[i].val.length - 1) != '/') {
							eventIds.push($scope.eventUrls[i].val.substring(startIndex + 8, $scope.eventUrls[i].val.length));
						} else {
							eventIds.push($scope.eventUrls[i].val.substring(startIndex + 8, $scope.eventUrls[i].val.length - 1));
						}
					} else {
						//TODO: add form feedback
						console.error('URL ' + (i + 1) + ' is not a facebook event (' + $scope.eventUrls[i].val + ')');
					}
				}
				if (!$scope.accessToken) {
					//TODO: disable "process urls" button until access token is granted
					console.log('no access token in $scope');
				}
				for (var _i = 0; _i < eventIds.length; ++_i) {
					console.log('Trying to load event with id: ' + eventIds[_i]);
					var prom = eventLoader.loadEvent(eventIds[_i], $scope.accessToken);
					//TODO: handle failed requests
					prom.then(function (response) {
						//TODO: handle error responses
						console.log(response);
						$scope.events.push(response);
						$scope.$apply();
					});
				}
			}
		};
		$scope.resetUrls = function () {
			$scope.eventUrls = [''];
		};
	}]);

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(2);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(4)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js!./../node_modules/autoprefixer-loader/index.js!./../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js!./../node_modules/autoprefixer-loader/index.js!./../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports
	
	
	// module
	exports.push([module.id, "html {\n  box-sizing: border-box; }\n\nbody {\n  position: relative;\n  padding: 50px 0 100px 0;\n  min-height: 100vh; }\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-weight: bolder; }\n\nfooter {\n  width: 100%;\n  height: 100px;\n  padding: 20px;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: #222222;\n  color: #BDB8B8;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center; }\n\n.nav-button {\n  display: inline-block;\n  width: 120px;\n  color: #BDB8B8;\n  font-size: 1.4em;\n  font-weight: lighter;\n  line-height: 50px;\n  text-align: center;\n  text-transform: uppercase;\n  -webkit-transition: all 0.1s;\n  transition: all 0.1s; }\n\n.nav-button:hover {\n  background-color: #337AB7;\n  color: #DEDEDE;\n  text-decoration: none; }\n\n.url-btn {\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  padding: 6px;\n  margin: 6px;\n  display: inline-block; }\n\n.url-input {\n  width: calc(100% - 64px);\n  display: inline-block; }\n", ""]);
	
	// exports


/***/ },
/* 3 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMWI4OGQwNDA3YmJlM2FjNzViZTEiLCJ3ZWJwYWNrOi8vLy4vanMvYXBwLmpzIiwid2VicGFjazovLy8uL3N0eWxlL3N0eWxlLnNjc3M/ZmQ1NyIsIndlYnBhY2s6Ly8vLi9zdHlsZS9zdHlsZS5zY3NzIiwid2VicGFjazovLy8uL34vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwid2luZG93IiwiZmJBc3luY0luaXQiLCJGQiIsImluaXQiLCJhcHBJZCIsInhmYm1sIiwidmVyc2lvbiIsIkFwcEV2ZW50cyIsImxvZ1BhZ2VWaWV3IiwiJHNjb3BlIiwiZWxlbWVudCIsInNjb3BlIiwiZ2V0RkJBdXRoIiwiZCIsInMiLCJpZCIsImpzIiwiZmpzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50QnlJZCIsImNyZWF0ZUVsZW1lbnQiLCJzcmMiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwiZG9jdW1lbnQiLCJzZXJ2aWNlIiwiX3NlbGYiLCJhdXRoIiwiZGVmIiwialF1ZXJ5IiwiRGVmZXJyZWQiLCJnZXRMb2dpblN0YXR1cyIsInJlc3BvbnNlIiwiY29uc29sZSIsImxvZyIsInJlc29sdmUiLCJwcm9tIiwicHJvbWlzZSIsImNvbm5lY3RlZCIsImxvYWRFdmVudCIsImV2ZW50SWQiLCJhY2Nlc3NUb2tlbiIsImFwaSIsImNvbnRyb2xsZXIiLCJmYkF1dGgiLCJldmVudExvYWRlciIsInRoZW4iLCJsb2dpblN0YXR1cyIsInN0YXR1cyIsImF1dGhSZXNwb25zZSIsImV2ZW50cyIsImV2ZW50VXJscyIsInZhbCIsInJlbW92ZVVSTCIsImluZGV4Iiwic3BsaWNlIiwiYWRkVVJMIiwicHVzaCIsInByb2Nlc3NVcmxzIiwiYWxlcnQiLCJldmVudElkcyIsImkiLCJsZW5ndGgiLCJzdGFydEluZGV4IiwiaW5kZXhPZiIsImNoYXJBdCIsInN1YnN0cmluZyIsImVycm9yIiwiJGFwcGx5IiwicmVzZXRVcmxzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7O0FDdENBLG9CQUFBQSxDQUFRLENBQVI7QUFDQTs7QUFFQSxLQUFJQyxNQUFNQyxRQUFRQyxNQUFSLENBQWUsUUFBZixFQUF5QixFQUF6QixDQUFWOztBQUVBQyxRQUFPQyxXQUFQLEdBQXFCLFlBQVc7QUFDL0JDLEtBQUdDLElBQUgsQ0FBUTtBQUNQQyxVQUFPLGtCQURBO0FBRVBDLFVBQU8sSUFGQTtBQUdQQyxZQUFTO0FBSEYsR0FBUjtBQUtBSixLQUFHSyxTQUFILENBQWFDLFdBQWI7QUFDQSxNQUFJQyxTQUFTWCxRQUFRWSxPQUFSLENBQWdCLHdCQUFoQixFQUEwQ0MsS0FBMUMsRUFBYjtBQUNBRixTQUFPRyxTQUFQO0FBQ0EsRUFURDs7QUFZQyxZQUFTQyxDQUFULEVBQVlDLENBQVosRUFBZUMsRUFBZixFQUFtQjtBQUNuQixNQUFJQyxFQUFKO0FBQUEsTUFBUUMsTUFBTUosRUFBRUssb0JBQUYsQ0FBdUJKLENBQXZCLEVBQTBCLENBQTFCLENBQWQ7QUFDQSxNQUFJRCxFQUFFTSxjQUFGLENBQWlCSixFQUFqQixDQUFKLEVBQTBCO0FBQ3pCO0FBQ0E7QUFDREMsT0FBS0gsRUFBRU8sYUFBRixDQUFnQk4sQ0FBaEIsQ0FBTDtBQUNBRSxLQUFHRCxFQUFILEdBQVFBLEVBQVI7QUFDQUMsS0FBR0ssR0FBSCxHQUFTLHFDQUFUO0FBQ0FKLE1BQUlLLFVBQUosQ0FBZUMsWUFBZixDQUE0QlAsRUFBNUIs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aUJBQWlCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFjO0FBQ2Q7QUFDQSxpQ0FBZ0Msc0JBQXNCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNIO0FBQ0EsSUFBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUU7QUFDRjtBQUNBLEdBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3REFBdUQ7QUFDdkQ7O0FBRUEsOEJBQTZCLG1CQUFtQjs7QUFFaEQ7O0FBRUE7O0FBRUE7QUFDQTtBQUNBIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL2Jvb3RzdHJhcCAxYjg4ZDA0MDdiYmUzYWM3NWJlMVxuICoqLyIsInJlcXVpcmUoJy4uL3N0eWxlL3N0eWxlLnNjc3MnKTtcclxuLy8gcmVxdWlyZSgnLi4vanMvQXN5bmNFdmVudExvYWRlci5qcycpO1xyXG5cclxudmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdmYnRvZ2MnLCBbXSk7XHJcblxyXG53aW5kb3cuZmJBc3luY0luaXQgPSBmdW5jdGlvbigpIHtcclxuXHRGQi5pbml0KHtcclxuXHRcdGFwcElkOiAnMTM1NDk2NDUyMTE4MDk1NycsXHJcblx0XHR4ZmJtbDogdHJ1ZSxcclxuXHRcdHZlcnNpb246ICd2Mi44J1xyXG5cdH0pO1xyXG5cdEZCLkFwcEV2ZW50cy5sb2dQYWdlVmlldygpO1xyXG5cdGxldCAkc2NvcGUgPSBhbmd1bGFyLmVsZW1lbnQoJ1tuZy1jb250cm9sbGVyPW15Q3RybF0nKS5zY29wZSgpO1xyXG5cdCRzY29wZS5nZXRGQkF1dGgoKTtcclxufTtcclxuXHJcblxyXG4oZnVuY3Rpb24oZCwgcywgaWQpIHtcclxuXHR2YXIganMsIGZqcyA9IGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF07XHJcblx0aWYgKGQuZ2V0RWxlbWVudEJ5SWQoaWQpKSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cdGpzID0gZC5jcmVhdGVFbGVtZW50KHMpO1xyXG5cdGpzLmlkID0gaWQ7XHJcblx0anMuc3JjID0gXCIvL2Nvbm5lY3QuZmFjZWJvb2submV0L2VuX1VTL3Nkay5qc1wiO1xyXG5cdGZqcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShqcywgZmpzKTtcclxufShkb2N1bWVudCwgJ3NjcmlwdCcsICdmYWNlYm9vay1qc3NkaycpKTtcclxuXHJcblxyXG4vKipcclxuICogSGFuZGxlcyBGYWNlYm9vayBhcGkgYXV0aGVudGljYXRpb25cclxuICovXHJcbmFwcC5zZXJ2aWNlKCdmYkF1dGgnLCBmdW5jdGlvbigpIHtcclxuXHRsZXQgX3NlbGYgPSB0aGlzO1xyXG5cdHRoaXMuYXV0aCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0bGV0IGRlZiA9IG5ldyBqUXVlcnkuRGVmZXJyZWQoKTtcclxuXHRcdEZCLmdldExvZ2luU3RhdHVzKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcclxuXHRcdFx0ZGVmLnJlc29sdmUocmVzcG9uc2UpO1xyXG5cdFx0fSk7XHJcblx0XHRsZXQgcHJvbSA9IGRlZi5wcm9taXNlKCk7XHJcblx0XHRwcm9tLmNvbm5lY3RlZCA9IGZhbHNlO1xyXG5cdFx0cmV0dXJuIHByb207XHJcblx0fTtcclxufSk7XHJcblxyXG4vKipcclxuICogSGFuZGxlcyB0aGUgYXN5bmNocm9ub3VzIGxvYWRpbmcgb2YgRmFjZWJvb2sgZXZlbnRzIHRocm91Z2ggdGhlIEZCIGdyYXBoIEFQSVxyXG4gKi9cclxuYXBwLnNlcnZpY2UoJ2V2ZW50TG9hZGVyJywgZnVuY3Rpb24oKSB7XHJcblx0bGV0IF9zZWxmID0gdGhpcztcclxuXHR0aGlzLmxvYWRFdmVudCA9IGZ1bmN0aW9uKGV2ZW50SWQsIGFjY2Vzc1Rva2VuKSB7XHJcblx0XHRsZXQgZGVmID0gbmV3IGpRdWVyeS5EZWZlcnJlZCgpO1xyXG5cdFx0RkIuYXBpKCcvJyArIGV2ZW50SWQgKyAnP2FjY2Vzc190b2tlbj0nICsgYWNjZXNzVG9rZW4sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdGRlZi5yZXNvbHZlKHJlc3BvbnNlKTtcclxuXHRcdFx0Ly9EbyBzb21ldGhpbmcgd2l0aCB0aGUgcmVzdWx0XHJcblx0XHR9KTtcclxuXHRcdGxldCBwcm9tID0gZGVmLnByb21pc2UoKTtcclxuXHRcdHByb20uY29ubmVjdGVkID0gZmFsc2U7XHJcblx0XHRyZXR1cm4gcHJvbTtcclxuXHR9O1xyXG59KTtcclxuXHJcbmFwcC5jb250cm9sbGVyKCdteUN0cmwnLCBbJyRzY29wZScsICdmYkF1dGgnLCAnZXZlbnRMb2FkZXInLCBmdW5jdGlvbigkc2NvcGUsIGZiQXV0aCwgZXZlbnRMb2FkZXIpIHtcclxuXHQkc2NvcGUuZ2V0RkJBdXRoID0gZnVuY3Rpb24oKSB7XHJcblx0XHQvL1RPRE86IGF1dG9tYXRpY2FsbHkgcmVuZXcgYWNjZXNzIHRva2VuXHJcblx0XHRsZXQgcHJvbSA9IGZiQXV0aC5hdXRoKCk7XHJcblx0XHRwcm9tLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0JHNjb3BlLmxvZ2luU3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xyXG5cdFx0XHQkc2NvcGUuYWNjZXNzVG9rZW4gPSByZXNwb25zZS5hdXRoUmVzcG9uc2UuYWNjZXNzVG9rZW47XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cdCRzY29wZS5ldmVudHMgPSBbXTtcclxuXHQkc2NvcGUuZXZlbnRVcmxzID0gW3tcclxuXHRcdHZhbDogJydcclxuXHR9XTtcclxuXHQkc2NvcGUucmVtb3ZlVVJMID0gZnVuY3Rpb24oaW5kZXgpIHtcclxuXHRcdCRzY29wZS5ldmVudFVybHMuc3BsaWNlKGluZGV4LCAxKTtcclxuXHR9O1xyXG5cdCRzY29wZS5hZGRVUkwgPSBmdW5jdGlvbigpIHtcclxuXHRcdGNvbnNvbGUubG9nKCRzY29wZS5ldmVudFVybHMpO1xyXG5cdFx0JHNjb3BlLmV2ZW50VXJscy5wdXNoKHtcclxuXHRcdFx0dmFsOiAnJ1xyXG5cdFx0fSk7XHJcblx0XHRjb25zb2xlLmxvZygkc2NvcGUuZXZlbnRVcmxzKTtcclxuXHJcblx0fTtcclxuXHQkc2NvcGUucHJvY2Vzc1VybHMgPSBmdW5jdGlvbigpIHtcclxuXHRcdGlmICghJHNjb3BlLmFjY2Vzc1Rva2VuKSB7XHJcblx0XHRcdGFsZXJ0KCdZb3UgbXVzdCBiZSBsb2dnZWQgaW4gdmlhIEZhY2Vib29rIGluIG9yZGVyIHRvIGdhdGhlciBldmVudCBkYXRhJyk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRsZXQgZXZlbnRJZHMgPSBbXTtcclxuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAkc2NvcGUuZXZlbnRVcmxzLmxlbmd0aDsgKytpKSB7XHJcblx0XHRcdFx0bGV0IHN0YXJ0SW5kZXggPSAkc2NvcGUuZXZlbnRVcmxzW2ldLnZhbC5pbmRleE9mKFwiL2V2ZW50cy9cIik7XHJcblx0XHRcdFx0aWYgKCRzY29wZS5ldmVudFVybHNbaV0udmFsICYmIHN0YXJ0SW5kZXggPiAwKSB7XHJcblx0XHRcdFx0XHRpZiAoJHNjb3BlLmV2ZW50VXJsc1tpXS52YWwuY2hhckF0KCRzY29wZS5ldmVudFVybHNbaV0udmFsLmxlbmd0aCAtIDEpICE9ICcvJykge1xyXG5cdFx0XHRcdFx0XHRldmVudElkcy5wdXNoKCRzY29wZS5ldmVudFVybHNbaV0udmFsLnN1YnN0cmluZyhzdGFydEluZGV4ICsgOCwgJHNjb3BlLmV2ZW50VXJsc1tpXS52YWwubGVuZ3RoKSk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRldmVudElkcy5wdXNoKCRzY29wZS5ldmVudFVybHNbaV0udmFsLnN1YnN0cmluZyhzdGFydEluZGV4ICsgOCwgJHNjb3BlLmV2ZW50VXJsc1tpXS52YWwubGVuZ3RoIC0gMSkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvL1RPRE86IGFkZCBmb3JtIGZlZWRiYWNrXHJcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCdVUkwgJyArIChpICsgMSkgKyAnIGlzIG5vdCBhIGZhY2Vib29rIGV2ZW50ICgnICsgJHNjb3BlLmV2ZW50VXJsc1tpXS52YWwgKyAnKScpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoISRzY29wZS5hY2Nlc3NUb2tlbikge1xyXG5cdFx0XHRcdC8vVE9ETzogZGlzYWJsZSBcInByb2Nlc3MgdXJsc1wiIGJ1dHRvbiB1bnRpbCBhY2Nlc3MgdG9rZW4gaXMgZ3JhbnRlZFxyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdubyBhY2Nlc3MgdG9rZW4gaW4gJHNjb3BlJyk7XHJcblx0XHRcdH1cclxuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBldmVudElkcy5sZW5ndGg7ICsraSkge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdUcnlpbmcgdG8gbG9hZCBldmVudCB3aXRoIGlkOiAnICsgZXZlbnRJZHNbaV0pO1xyXG5cdFx0XHRcdGxldCBwcm9tID0gZXZlbnRMb2FkZXIubG9hZEV2ZW50KGV2ZW50SWRzW2ldLCAkc2NvcGUuYWNjZXNzVG9rZW4pO1xyXG5cdFx0XHRcdC8vVE9ETzogaGFuZGxlIGZhaWxlZCByZXF1ZXN0c1xyXG5cdFx0XHRcdHByb20udGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0Ly9UT0RPOiBoYW5kbGUgZXJyb3IgcmVzcG9uc2VzXHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhyZXNwb25zZSk7XHJcblx0XHRcdFx0XHQkc2NvcGUuZXZlbnRzLnB1c2gocmVzcG9uc2UpO1xyXG5cdFx0XHRcdFx0JHNjb3BlLiRhcHBseSgpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHQkc2NvcGUucmVzZXRVcmxzID0gZnVuY3Rpb24oKSB7XHJcblx0XHQkc2NvcGUuZXZlbnRVcmxzID0gWycnXTtcclxuXHR9O1xyXG59XSk7XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vanMvYXBwLmpzXG4gKiovIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWxvYWRlci9pbmRleC5qcyEuLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlLnNjc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1sb2FkZXIvaW5kZXguanMhLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1sb2FkZXIvaW5kZXguanMhLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZS5zY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3R5bGUvc3R5bGUuc2Nzc1xuICoqIG1vZHVsZSBpZCA9IDFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiaHRtbCB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XFxuXFxuYm9keSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBwYWRkaW5nOiA1MHB4IDAgMTAwcHggMDtcXG4gIG1pbi1oZWlnaHQ6IDEwMHZoOyB9XFxuXFxuaDEsXFxuaDIsXFxuaDMsXFxuaDQsXFxuaDUsXFxuaDYge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjsgfVxcblxcbmZvb3RlciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwcHg7XFxuICBwYWRkaW5nOiAyMHB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIyMjIyMjtcXG4gIGNvbG9yOiAjQkRCOEI4O1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7IH1cXG5cXG4ubmF2LWJ1dHRvbiB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMTIwcHg7XFxuICBjb2xvcjogI0JEQjhCODtcXG4gIGZvbnQtc2l6ZTogMS40ZW07XFxuICBmb250LXdlaWdodDogbGlnaHRlcjtcXG4gIGxpbmUtaGVpZ2h0OiA1MHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsIDAuMXM7XFxuICB0cmFuc2l0aW9uOiBhbGwgMC4xczsgfVxcblxcbi5uYXYtYnV0dG9uOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzMzdBQjc7XFxuICBjb2xvcjogI0RFREVERTtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxcblxcbi51cmwtYnRuIHtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIHdpZHRoOiAzNnB4O1xcbiAgaGVpZ2h0OiAzNnB4O1xcbiAgcGFkZGluZzogNnB4O1xcbiAgbWFyZ2luOiA2cHg7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH1cXG5cXG4udXJsLWlucHV0IHtcXG4gIHdpZHRoOiBjYWxjKDEwMCUgLSA2NHB4KTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2Nzcy1sb2FkZXIhLi9+L2F1dG9wcmVmaXhlci1sb2FkZXIhLi9+L3Nhc3MtbG9hZGVyIS4vc3R5bGUvc3R5bGUuc2Nzc1xuICoqIG1vZHVsZSBpZCA9IDJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qXHJcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXHJcbiovXHJcbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XHJcblx0dmFyIGxpc3QgPSBbXTtcclxuXHJcblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xyXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuXHRcdHZhciByZXN1bHQgPSBbXTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gdGhpc1tpXTtcclxuXHRcdFx0aWYoaXRlbVsyXSkge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgaXRlbVsxXSArIFwifVwiKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaChpdGVtWzFdKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlc3VsdC5qb2luKFwiXCIpO1xyXG5cdH07XHJcblxyXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XHJcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xyXG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXHJcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcclxuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xyXG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXHJcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XHJcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcclxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcclxuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cclxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcclxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcclxuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XHJcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcclxuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xyXG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cdHJldHVybiBsaXN0O1xyXG59O1xyXG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1xuICoqIG1vZHVsZSBpZCA9IDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qXHJcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXHJcbiovXHJcbnZhciBzdHlsZXNJbkRvbSA9IHt9LFxyXG5cdG1lbW9pemUgPSBmdW5jdGlvbihmbikge1xyXG5cdFx0dmFyIG1lbW87XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdFx0XHRyZXR1cm4gbWVtbztcclxuXHRcdH07XHJcblx0fSxcclxuXHRpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiAvbXNpZSBbNi05XVxcYi8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKTtcclxuXHR9KSxcclxuXHRnZXRIZWFkRWxlbWVudCA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xyXG5cdFx0cmV0dXJuIGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xyXG5cdH0pLFxyXG5cdHNpbmdsZXRvbkVsZW1lbnQgPSBudWxsLFxyXG5cdHNpbmdsZXRvbkNvdW50ZXIgPSAwLFxyXG5cdHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wID0gW107XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcclxuXHRpZih0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcclxuXHRcdGlmKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xyXG5cdH1cclxuXHJcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XHJcblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxyXG5cdGlmICh0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gPT09IFwidW5kZWZpbmVkXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xyXG5cclxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgPGhlYWQ+LlxyXG5cdGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ1bmRlZmluZWRcIikgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XHJcblxyXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCk7XHJcblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcclxuXHJcblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XHJcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcclxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xyXG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XHJcblx0XHR9XHJcblx0XHRpZihuZXdMaXN0KSB7XHJcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCk7XHJcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XHJcblx0XHR9XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcclxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xyXG5cdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKylcclxuXHRcdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKCk7XHJcblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucykge1xyXG5cdGZvcih2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XHJcblx0XHRpZihkb21TdHlsZSkge1xyXG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XHJcblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xyXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzKGxpc3QpIHtcclxuXHR2YXIgc3R5bGVzID0gW107XHJcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xyXG5cdGZvcih2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XHJcblx0XHR2YXIgaWQgPSBpdGVtWzBdO1xyXG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XHJcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xyXG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XHJcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XHJcblx0XHRpZighbmV3U3R5bGVzW2lkXSlcclxuXHRcdFx0c3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcclxuXHRcdGVsc2VcclxuXHRcdFx0bmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xyXG5cdH1cclxuXHRyZXR1cm4gc3R5bGVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KSB7XHJcblx0dmFyIGhlYWQgPSBnZXRIZWFkRWxlbWVudCgpO1xyXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wW3N0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xyXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XHJcblx0XHRpZighbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcclxuXHRcdFx0aGVhZC5pbnNlcnRCZWZvcmUoc3R5bGVFbGVtZW50LCBoZWFkLmZpcnN0Q2hpbGQpO1xyXG5cdFx0fSBlbHNlIGlmKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XHJcblx0XHRcdGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlRWxlbWVudCwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0fVxyXG5cdFx0c3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AucHVzaChzdHlsZUVsZW1lbnQpO1xyXG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xyXG5cdFx0aGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0Jy4gTXVzdCBiZSAndG9wJyBvciAnYm90dG9tJy5cIik7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XHJcblx0c3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcclxuXHR2YXIgaWR4ID0gc3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZUVsZW1lbnQpO1xyXG5cdGlmKGlkeCA+PSAwKSB7XHJcblx0XHRzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSB7XHJcblx0dmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcclxuXHRzdHlsZUVsZW1lbnQudHlwZSA9IFwidGV4dC9jc3NcIjtcclxuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KTtcclxuXHRyZXR1cm4gc3R5bGVFbGVtZW50O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKSB7XHJcblx0dmFyIGxpbmtFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XHJcblx0bGlua0VsZW1lbnQucmVsID0gXCJzdHlsZXNoZWV0XCI7XHJcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmtFbGVtZW50KTtcclxuXHRyZXR1cm4gbGlua0VsZW1lbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xyXG5cdHZhciBzdHlsZUVsZW1lbnQsIHVwZGF0ZSwgcmVtb3ZlO1xyXG5cclxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcclxuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xyXG5cdFx0c3R5bGVFbGVtZW50ID0gc2luZ2xldG9uRWxlbWVudCB8fCAoc2luZ2xldG9uRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XHJcblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCBmYWxzZSk7XHJcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKTtcclxuXHR9IGVsc2UgaWYob2JqLnNvdXJjZU1hcCAmJlxyXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcblx0XHRzdHlsZUVsZW1lbnQgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcclxuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpO1xyXG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0XHRpZihzdHlsZUVsZW1lbnQuaHJlZilcclxuXHRcdFx0XHRVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlRWxlbWVudC5ocmVmKTtcclxuXHRcdH07XHJcblx0fSBlbHNlIHtcclxuXHRcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcclxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpO1xyXG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdHVwZGF0ZShvYmopO1xyXG5cclxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XHJcblx0XHRpZihuZXdPYmopIHtcclxuXHRcdFx0aWYobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKVxyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZW1vdmUoKTtcclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xyXG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcclxuXHJcblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcclxuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcclxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xyXG5cdH07XHJcbn0pKCk7XHJcblxyXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XHJcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xyXG5cclxuXHRpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcclxuXHRcdHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xyXG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZUVsZW1lbnQuY2hpbGROb2RlcztcclxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcclxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChjc3NOb2RlKTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGVFbGVtZW50LCBvYmopIHtcclxuXHR2YXIgY3NzID0gb2JqLmNzcztcclxuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XHJcblxyXG5cdGlmKG1lZGlhKSB7XHJcblx0XHRzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXHJcblx0fVxyXG5cclxuXHRpZihzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xyXG5cdFx0c3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcclxuXHR9IGVsc2Uge1xyXG5cdFx0d2hpbGUoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcclxuXHRcdH1cclxuXHRcdHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUxpbmsobGlua0VsZW1lbnQsIG9iaikge1xyXG5cdHZhciBjc3MgPSBvYmouY3NzO1xyXG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xyXG5cclxuXHRpZihzb3VyY2VNYXApIHtcclxuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XHJcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XHJcblx0fVxyXG5cclxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcclxuXHJcblx0dmFyIG9sZFNyYyA9IGxpbmtFbGVtZW50LmhyZWY7XHJcblxyXG5cdGxpbmtFbGVtZW50LmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG5cclxuXHRpZihvbGRTcmMpXHJcblx0XHRVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XHJcbn1cclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1xuICoqIG1vZHVsZSBpZCA9IDRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=